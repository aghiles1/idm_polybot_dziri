package Polybot.polybot.aspects

import fr.inria.diverse.k3.al.annotationprocessor.Aspect
import polybot.Bot
import polybot.Point
import polybot.Instruction
import polybot.NamedElement
import polybot.GoTo
import polybot.Move
import polybot.Right
import polybot.Left
import polybot.Reverse
import polybot.Forward

import static extension Polybot.polybot.aspects.InstructionAspect.*

import fr.inria.diverse.k3.al.annotationprocessor.Main
import fr.inria.diverse.k3.al.annotationprocessor.Step
import fr.inria.diverse.k3.al.annotationprocessor.ReplaceAspectMethod
import fr.inria.diverse.k3.al.annotationprocessor.OverrideAspectMethod
import fr.unice.polytech.deantoni.vrep.polybot.robot.PolyRob

@Aspect(className=Bot)
class BotAspect {
	
	static var PolyRob rob;
	 
	@Main
	def void execute(){
		BotAspect.rob = new PolyRob("127.0.0.1", 19997);
		BotAspect.rob.start();
        for(instr : _self.instructionList){
            instr.launch();
        }
    }
}
 
@Aspect(className=Point)
class PointAspect {

}
 
@Aspect(className=Instruction)
abstract class InstructionAspect extends NamedElementAspect {
	
	def void launch() {
		_self.exec(_self.speed, _self.duration);
	}
	@Step
	@ReplaceAspectMethod
	def void exec(int speed, int duration);
}

@Aspect(className=NamedElement)
abstract class NamedElementAspect {

}



@Aspect(className=Move)
abstract class MoveAspect extends InstructionAspect {
	@Step
	@ReplaceAspectMethod
	def void exec(int speed, int duration);
}

@Aspect(className=GoTo)
class GoToAspect extends MoveAspect {
	@Step
	@OverrideAspectMethod
	def void exec(int speed, int duration) {
		println(_self.name);
	}
}

@Aspect(className=Right)
class RightAspect extends MoveAspect {
	@Step
	@OverrideAspectMethod
	def void exec(int speed, int duration) {
		println(_self.name);
	}
}

@Aspect(className=Left)
class LeftAspect extends MoveAspect {
	@Step
	@OverrideAspectMethod
	def void exec(int speed, int duration) {
		println(_self.name);
	}
}

@Aspect(className=Reverse)
class ReverseAspect extends MoveAspect {
	@Step
	@OverrideAspectMethod
	def void exec(int speed, int duration) {
		println(_self.name);
	}
}

@Aspect(className=Forward)
class ForwardAspect extends MoveAspect {
	@Step
	@OverrideAspectMethod
	def void exec(int speed, int duration) {
		println(_self.name);
	}
}


