/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.dziri.polybot.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PolybotGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dziri.polybot.Polybot.Bot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInitKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitialPositionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitialPositionPointParserRuleCall_3_1_0 = (RuleCall)cInitialPositionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInstructionListKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cInstructionListAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cInstructionListInstructionParserRuleCall_4_2_0 = (RuleCall)cInstructionListAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cInstructionListAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cInstructionListInstructionParserRuleCall_4_3_1_0 = (RuleCall)cInstructionListAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Bot:
		//	{Bot}
		//	'Bot'
		//	'{' ('init' initialPosition=Point)? ('instructionList' '{' instructionList+=Instruction (","
		//	instructionList+=Instruction)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Bot} 'Bot' '{' ('init' initialPosition=Point)? ('instructionList' '{' instructionList+=Instruction (","
		//instructionList+=Instruction)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{Bot}
		public Action getBotAction_0() { return cBotAction_0; }
		
		//'Bot'
		public Keyword getBotKeyword_1() { return cBotKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('init' initialPosition=Point)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'init'
		public Keyword getInitKeyword_3_0() { return cInitKeyword_3_0; }
		
		//initialPosition=Point
		public Assignment getInitialPositionAssignment_3_1() { return cInitialPositionAssignment_3_1; }
		
		//Point
		public RuleCall getInitialPositionPointParserRuleCall_3_1_0() { return cInitialPositionPointParserRuleCall_3_1_0; }
		
		//('instructionList' '{' instructionList+=Instruction ("," instructionList+=Instruction)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'instructionList'
		public Keyword getInstructionListKeyword_4_0() { return cInstructionListKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//instructionList+=Instruction
		public Assignment getInstructionListAssignment_4_2() { return cInstructionListAssignment_4_2; }
		
		//Instruction
		public RuleCall getInstructionListInstructionParserRuleCall_4_2_0() { return cInstructionListInstructionParserRuleCall_4_2_0; }
		
		//("," instructionList+=Instruction)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//instructionList+=Instruction
		public Assignment getInstructionListAssignment_4_3_1() { return cInstructionListAssignment_4_3_1; }
		
		//Instruction
		public RuleCall getInstructionListInstructionParserRuleCall_4_3_1_0() { return cInstructionListInstructionParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class InstructionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dziri.polybot.Polybot.Instruction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTakeDropObjectParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cWhileParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfObstacleDetectedParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cIfObjectDetectedParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Instruction:
		//	Move | TakeDropObject | While | IfObstacleDetected | IfObjectDetected;
		@Override public ParserRule getRule() { return rule; }
		
		//Move | TakeDropObject | While | IfObstacleDetected | IfObjectDetected
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Move
		public RuleCall getMoveParserRuleCall_0() { return cMoveParserRuleCall_0; }
		
		//TakeDropObject
		public RuleCall getTakeDropObjectParserRuleCall_1() { return cTakeDropObjectParserRuleCall_1; }
		
		//While
		public RuleCall getWhileParserRuleCall_2() { return cWhileParserRuleCall_2; }
		
		//IfObstacleDetected
		public RuleCall getIfObstacleDetectedParserRuleCall_3() { return cIfObstacleDetectedParserRuleCall_3; }
		
		//IfObjectDetected
		public RuleCall getIfObjectDetectedParserRuleCall_4() { return cIfObjectDetectedParserRuleCall_4; }
	}
	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dziri.polybot.Polybot.Move");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cGoToParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRightParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLeftParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReverseParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForwardParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Move:
		//	GoTo | Right | Left | Reverse | Forward;
		@Override public ParserRule getRule() { return rule; }
		
		//GoTo | Right | Left | Reverse | Forward
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//GoTo
		public RuleCall getGoToParserRuleCall_0() { return cGoToParserRuleCall_0; }
		
		//Right
		public RuleCall getRightParserRuleCall_1() { return cRightParserRuleCall_1; }
		
		//Left
		public RuleCall getLeftParserRuleCall_2() { return cLeftParserRuleCall_2; }
		
		//Reverse
		public RuleCall getReverseParserRuleCall_3() { return cReverseParserRuleCall_3; }
		
		//Forward
		public RuleCall getForwardParserRuleCall_4() { return cForwardParserRuleCall_4; }
	}
	public class PointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dziri.polybot.Polybot.Point");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPointAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPointKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cXAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cXEIntParserRuleCall_3_0 = (RuleCall)cXAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYEIntParserRuleCall_5_0 = (RuleCall)cYAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Point:
		//	{Point}
		//	'Point'
		//	'('
		//	x=EInt ';'
		//	y=EInt
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Point} 'Point' '(' x=EInt ';' y=EInt ')'
		public Group getGroup() { return cGroup; }
		
		//{Point}
		public Action getPointAction_0() { return cPointAction_0; }
		
		//'Point'
		public Keyword getPointKeyword_1() { return cPointKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//x=EInt
		public Assignment getXAssignment_3() { return cXAssignment_3; }
		
		//EInt
		public RuleCall getXEIntParserRuleCall_3_0() { return cXEIntParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//y=EInt
		public Assignment getYAssignment_5() { return cYAssignment_5; }
		
		//EInt
		public RuleCall getYEIntParserRuleCall_5_0() { return cYEIntParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dziri.polybot.Polybot.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dziri.polybot.Polybot.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class GoToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dziri.polybot.Polybot.GoTo");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGoToAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGoToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpeedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpeedEIntParserRuleCall_3_0 = (RuleCall)cSpeedAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDurationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDurationEIntParserRuleCall_5_0 = (RuleCall)cDurationAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//GoTo:
		//	{GoTo}
		//	'GoTo'
		//	'('
		//	speed=EInt ';'
		//	duration=EInt
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{GoTo} 'GoTo' '(' speed=EInt ';' duration=EInt ')'
		public Group getGroup() { return cGroup; }
		
		//{GoTo}
		public Action getGoToAction_0() { return cGoToAction_0; }
		
		//'GoTo'
		public Keyword getGoToKeyword_1() { return cGoToKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//speed=EInt
		public Assignment getSpeedAssignment_3() { return cSpeedAssignment_3; }
		
		//EInt
		public RuleCall getSpeedEIntParserRuleCall_3_0() { return cSpeedEIntParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//duration=EInt
		public Assignment getDurationAssignment_5() { return cDurationAssignment_5; }
		
		//EInt
		public RuleCall getDurationEIntParserRuleCall_5_0() { return cDurationEIntParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dziri.polybot.Polybot.Right");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRightAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRightKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpeedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpeedEIntParserRuleCall_3_0 = (RuleCall)cSpeedAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDurationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDurationEIntParserRuleCall_5_0 = (RuleCall)cDurationAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Right:
		//	{Right}
		//	'Right'
		//	'('
		//	speed=EInt ';'
		//	duration=EInt
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Right} 'Right' '(' speed=EInt ';' duration=EInt ')'
		public Group getGroup() { return cGroup; }
		
		//{Right}
		public Action getRightAction_0() { return cRightAction_0; }
		
		//'Right'
		public Keyword getRightKeyword_1() { return cRightKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//speed=EInt
		public Assignment getSpeedAssignment_3() { return cSpeedAssignment_3; }
		
		//EInt
		public RuleCall getSpeedEIntParserRuleCall_3_0() { return cSpeedEIntParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//duration=EInt
		public Assignment getDurationAssignment_5() { return cDurationAssignment_5; }
		
		//EInt
		public RuleCall getDurationEIntParserRuleCall_5_0() { return cDurationEIntParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class LeftElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dziri.polybot.Polybot.Left");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLeftAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpeedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpeedEIntParserRuleCall_3_0 = (RuleCall)cSpeedAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDurationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDurationEIntParserRuleCall_5_0 = (RuleCall)cDurationAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Left:
		//	{Left}
		//	'Left'
		//	'('
		//	speed=EInt ';'
		//	duration=EInt
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Left} 'Left' '(' speed=EInt ';' duration=EInt ')'
		public Group getGroup() { return cGroup; }
		
		//{Left}
		public Action getLeftAction_0() { return cLeftAction_0; }
		
		//'Left'
		public Keyword getLeftKeyword_1() { return cLeftKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//speed=EInt
		public Assignment getSpeedAssignment_3() { return cSpeedAssignment_3; }
		
		//EInt
		public RuleCall getSpeedEIntParserRuleCall_3_0() { return cSpeedEIntParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//duration=EInt
		public Assignment getDurationAssignment_5() { return cDurationAssignment_5; }
		
		//EInt
		public RuleCall getDurationEIntParserRuleCall_5_0() { return cDurationEIntParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ReverseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dziri.polybot.Polybot.Reverse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReverseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cReverseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpeedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpeedEIntParserRuleCall_3_0 = (RuleCall)cSpeedAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDurationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDurationEIntParserRuleCall_5_0 = (RuleCall)cDurationAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Reverse:
		//	{Reverse}
		//	'Reverse'
		//	'('
		//	speed=EInt ';'
		//	duration=EInt
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Reverse} 'Reverse' '(' speed=EInt ';' duration=EInt ')'
		public Group getGroup() { return cGroup; }
		
		//{Reverse}
		public Action getReverseAction_0() { return cReverseAction_0; }
		
		//'Reverse'
		public Keyword getReverseKeyword_1() { return cReverseKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//speed=EInt
		public Assignment getSpeedAssignment_3() { return cSpeedAssignment_3; }
		
		//EInt
		public RuleCall getSpeedEIntParserRuleCall_3_0() { return cSpeedEIntParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//duration=EInt
		public Assignment getDurationAssignment_5() { return cDurationAssignment_5; }
		
		//EInt
		public RuleCall getDurationEIntParserRuleCall_5_0() { return cDurationEIntParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class ForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dziri.polybot.Polybot.Forward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForwardAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForwardKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSpeedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSpeedEIntParserRuleCall_3_0 = (RuleCall)cSpeedAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDurationAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDurationEIntParserRuleCall_5_0 = (RuleCall)cDurationAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Forward:
		//	{Forward}
		//	'Forward'
		//	'('
		//	speed=EInt ';'
		//	duration=EInt
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Forward} 'Forward' '(' speed=EInt ';' duration=EInt ')'
		public Group getGroup() { return cGroup; }
		
		//{Forward}
		public Action getForwardAction_0() { return cForwardAction_0; }
		
		//'Forward'
		public Keyword getForwardKeyword_1() { return cForwardKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//speed=EInt
		public Assignment getSpeedAssignment_3() { return cSpeedAssignment_3; }
		
		//EInt
		public RuleCall getSpeedEIntParserRuleCall_3_0() { return cSpeedEIntParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//duration=EInt
		public Assignment getDurationAssignment_5() { return cDurationAssignment_5; }
		
		//EInt
		public RuleCall getDurationEIntParserRuleCall_5_0() { return cDurationEIntParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class IfObjectDetectedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dziri.polybot.Polybot.IfObjectDetected");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfObjectDetectedAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfObjectDetectedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cListOfInstructionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cListOfInstructionsInstructionParserRuleCall_3_0_0 = (RuleCall)cListOfInstructionsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cListOfInstructionsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cListOfInstructionsInstructionParserRuleCall_3_1_1_0 = (RuleCall)cListOfInstructionsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IfObjectDetected:
		//	{IfObjectDetected}
		//	'IfObjectDetected'
		//	'{' (listOfInstructions+=Instruction ("," listOfInstructions+=Instruction)*)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{IfObjectDetected} 'IfObjectDetected' '{' (listOfInstructions+=Instruction ("," listOfInstructions+=Instruction)*) '}'
		public Group getGroup() { return cGroup; }
		
		//{IfObjectDetected}
		public Action getIfObjectDetectedAction_0() { return cIfObjectDetectedAction_0; }
		
		//'IfObjectDetected'
		public Keyword getIfObjectDetectedKeyword_1() { return cIfObjectDetectedKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//listOfInstructions+=Instruction ("," listOfInstructions+=Instruction)*
		public Group getGroup_3() { return cGroup_3; }
		
		//listOfInstructions+=Instruction
		public Assignment getListOfInstructionsAssignment_3_0() { return cListOfInstructionsAssignment_3_0; }
		
		//Instruction
		public RuleCall getListOfInstructionsInstructionParserRuleCall_3_0_0() { return cListOfInstructionsInstructionParserRuleCall_3_0_0; }
		
		//("," listOfInstructions+=Instruction)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//listOfInstructions+=Instruction
		public Assignment getListOfInstructionsAssignment_3_1_1() { return cListOfInstructionsAssignment_3_1_1; }
		
		//Instruction
		public RuleCall getListOfInstructionsInstructionParserRuleCall_3_1_1_0() { return cListOfInstructionsInstructionParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class IfObstacleDetectedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dziri.polybot.Polybot.IfObstacleDetected");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIfObstacleDetectedAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfObstacleDetectedKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cListOfInstructionsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cListOfInstructionsInstructionParserRuleCall_3_0_0 = (RuleCall)cListOfInstructionsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cListOfInstructionsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cListOfInstructionsInstructionParserRuleCall_3_1_1_0 = (RuleCall)cListOfInstructionsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IfObstacleDetected:
		//	{IfObstacleDetected}
		//	'IfObstacleDetected'
		//	'{' (listOfInstructions+=Instruction ("," listOfInstructions+=Instruction)*)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{IfObstacleDetected} 'IfObstacleDetected' '{' (listOfInstructions+=Instruction ("," listOfInstructions+=Instruction)*)
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{IfObstacleDetected}
		public Action getIfObstacleDetectedAction_0() { return cIfObstacleDetectedAction_0; }
		
		//'IfObstacleDetected'
		public Keyword getIfObstacleDetectedKeyword_1() { return cIfObstacleDetectedKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//listOfInstructions+=Instruction ("," listOfInstructions+=Instruction)*
		public Group getGroup_3() { return cGroup_3; }
		
		//listOfInstructions+=Instruction
		public Assignment getListOfInstructionsAssignment_3_0() { return cListOfInstructionsAssignment_3_0; }
		
		//Instruction
		public RuleCall getListOfInstructionsInstructionParserRuleCall_3_0_0() { return cListOfInstructionsInstructionParserRuleCall_3_0_0; }
		
		//("," listOfInstructions+=Instruction)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//listOfInstructions+=Instruction
		public Assignment getListOfInstructionsAssignment_3_1_1() { return cListOfInstructionsAssignment_3_1_1; }
		
		//Instruction
		public RuleCall getListOfInstructionsInstructionParserRuleCall_3_1_1_0() { return cListOfInstructionsInstructionParserRuleCall_3_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class TakeDropObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dziri.polybot.Polybot.TakeDropObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTakeDropObjectAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTakeDropObjectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//TakeDropObject:
		//	{TakeDropObject}
		//	'TakeDropObject';
		@Override public ParserRule getRule() { return rule; }
		
		//{TakeDropObject} 'TakeDropObject'
		public Group getGroup() { return cGroup; }
		
		//{TakeDropObject}
		public Action getTakeDropObjectAction_0() { return cTakeDropObjectAction_0; }
		
		//'TakeDropObject'
		public Keyword getTakeDropObjectKeyword_1() { return cTakeDropObjectKeyword_1; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.polytech.dziri.polybot.Polybot.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWhileAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNbAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNbEIntParserRuleCall_3_0 = (RuleCall)cNbAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cListOfInstructionsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cListOfInstructionsInstructionParserRuleCall_6_0_0 = (RuleCall)cListOfInstructionsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cListOfInstructionsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cListOfInstructionsInstructionParserRuleCall_6_1_1_0 = (RuleCall)cListOfInstructionsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//While:
		//	{While}
		//	'While'
		//	'('
		//	nb=EInt
		//	')'
		//	'{' (listOfInstructions+=Instruction ("," listOfInstructions+=Instruction)*)
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{While} 'While' '(' nb=EInt ')' '{' (listOfInstructions+=Instruction ("," listOfInstructions+=Instruction)*) '}'
		public Group getGroup() { return cGroup; }
		
		//{While}
		public Action getWhileAction_0() { return cWhileAction_0; }
		
		//'While'
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//nb=EInt
		public Assignment getNbAssignment_3() { return cNbAssignment_3; }
		
		//EInt
		public RuleCall getNbEIntParserRuleCall_3_0() { return cNbEIntParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//listOfInstructions+=Instruction ("," listOfInstructions+=Instruction)*
		public Group getGroup_6() { return cGroup_6; }
		
		//listOfInstructions+=Instruction
		public Assignment getListOfInstructionsAssignment_6_0() { return cListOfInstructionsAssignment_6_0; }
		
		//Instruction
		public RuleCall getListOfInstructionsInstructionParserRuleCall_6_0_0() { return cListOfInstructionsInstructionParserRuleCall_6_0_0; }
		
		//("," listOfInstructions+=Instruction)*
		public Group getGroup_6_1() { return cGroup_6_1; }
		
		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }
		
		//listOfInstructions+=Instruction
		public Assignment getListOfInstructionsAssignment_6_1_1() { return cListOfInstructionsAssignment_6_1_1; }
		
		//Instruction
		public RuleCall getListOfInstructionsInstructionParserRuleCall_6_1_1_0() { return cListOfInstructionsInstructionParserRuleCall_6_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	
	
	private final BotElements pBot;
	private final InstructionElements pInstruction;
	private final MoveElements pMove;
	private final PointElements pPoint;
	private final EIntElements pEInt;
	private final EStringElements pEString;
	private final GoToElements pGoTo;
	private final RightElements pRight;
	private final LeftElements pLeft;
	private final ReverseElements pReverse;
	private final ForwardElements pForward;
	private final IfObjectDetectedElements pIfObjectDetected;
	private final IfObstacleDetectedElements pIfObstacleDetected;
	private final TakeDropObjectElements pTakeDropObject;
	private final WhileElements pWhile;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PolybotGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBot = new BotElements();
		this.pInstruction = new InstructionElements();
		this.pMove = new MoveElements();
		this.pPoint = new PointElements();
		this.pEInt = new EIntElements();
		this.pEString = new EStringElements();
		this.pGoTo = new GoToElements();
		this.pRight = new RightElements();
		this.pLeft = new LeftElements();
		this.pReverse = new ReverseElements();
		this.pForward = new ForwardElements();
		this.pIfObjectDetected = new IfObjectDetectedElements();
		this.pIfObstacleDetected = new IfObstacleDetectedElements();
		this.pTakeDropObject = new TakeDropObjectElements();
		this.pWhile = new WhileElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.unice.polytech.dziri.polybot.Polybot".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Bot:
	//	{Bot}
	//	'Bot'
	//	'{' ('init' initialPosition=Point)? ('instructionList' '{' instructionList+=Instruction (","
	//	instructionList+=Instruction)* '}')?
	//	'}';
	public BotElements getBotAccess() {
		return pBot;
	}
	
	public ParserRule getBotRule() {
		return getBotAccess().getRule();
	}
	
	//Instruction:
	//	Move | TakeDropObject | While | IfObstacleDetected | IfObjectDetected;
	public InstructionElements getInstructionAccess() {
		return pInstruction;
	}
	
	public ParserRule getInstructionRule() {
		return getInstructionAccess().getRule();
	}
	
	//Move:
	//	GoTo | Right | Left | Reverse | Forward;
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}
	
	//Point:
	//	{Point}
	//	'Point'
	//	'('
	//	x=EInt ';'
	//	y=EInt
	//	')';
	public PointElements getPointAccess() {
		return pPoint;
	}
	
	public ParserRule getPointRule() {
		return getPointAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//GoTo:
	//	{GoTo}
	//	'GoTo'
	//	'('
	//	speed=EInt ';'
	//	duration=EInt
	//	')';
	public GoToElements getGoToAccess() {
		return pGoTo;
	}
	
	public ParserRule getGoToRule() {
		return getGoToAccess().getRule();
	}
	
	//Right:
	//	{Right}
	//	'Right'
	//	'('
	//	speed=EInt ';'
	//	duration=EInt
	//	')';
	public RightElements getRightAccess() {
		return pRight;
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}
	
	//Left:
	//	{Left}
	//	'Left'
	//	'('
	//	speed=EInt ';'
	//	duration=EInt
	//	')';
	public LeftElements getLeftAccess() {
		return pLeft;
	}
	
	public ParserRule getLeftRule() {
		return getLeftAccess().getRule();
	}
	
	//Reverse:
	//	{Reverse}
	//	'Reverse'
	//	'('
	//	speed=EInt ';'
	//	duration=EInt
	//	')';
	public ReverseElements getReverseAccess() {
		return pReverse;
	}
	
	public ParserRule getReverseRule() {
		return getReverseAccess().getRule();
	}
	
	//Forward:
	//	{Forward}
	//	'Forward'
	//	'('
	//	speed=EInt ';'
	//	duration=EInt
	//	')';
	public ForwardElements getForwardAccess() {
		return pForward;
	}
	
	public ParserRule getForwardRule() {
		return getForwardAccess().getRule();
	}
	
	//IfObjectDetected:
	//	{IfObjectDetected}
	//	'IfObjectDetected'
	//	'{' (listOfInstructions+=Instruction ("," listOfInstructions+=Instruction)*)
	//	'}';
	public IfObjectDetectedElements getIfObjectDetectedAccess() {
		return pIfObjectDetected;
	}
	
	public ParserRule getIfObjectDetectedRule() {
		return getIfObjectDetectedAccess().getRule();
	}
	
	//IfObstacleDetected:
	//	{IfObstacleDetected}
	//	'IfObstacleDetected'
	//	'{' (listOfInstructions+=Instruction ("," listOfInstructions+=Instruction)*)
	//	'}';
	public IfObstacleDetectedElements getIfObstacleDetectedAccess() {
		return pIfObstacleDetected;
	}
	
	public ParserRule getIfObstacleDetectedRule() {
		return getIfObstacleDetectedAccess().getRule();
	}
	
	//TakeDropObject:
	//	{TakeDropObject}
	//	'TakeDropObject';
	public TakeDropObjectElements getTakeDropObjectAccess() {
		return pTakeDropObject;
	}
	
	public ParserRule getTakeDropObjectRule() {
		return getTakeDropObjectAccess().getRule();
	}
	
	//While:
	//	{While}
	//	'While'
	//	'('
	//	nb=EInt
	//	')'
	//	'{' (listOfInstructions+=Instruction ("," listOfInstructions+=Instruction)*)
	//	'}';
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
