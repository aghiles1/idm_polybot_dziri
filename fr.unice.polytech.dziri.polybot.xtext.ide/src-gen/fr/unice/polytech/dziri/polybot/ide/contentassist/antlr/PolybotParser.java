/*
 * generated by Xtext 2.14.0
 */
package fr.unice.polytech.dziri.polybot.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.unice.polytech.dziri.polybot.ide.contentassist.antlr.internal.InternalPolybotParser;
import fr.unice.polytech.dziri.polybot.services.PolybotGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class PolybotParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PolybotGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PolybotGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInstructionAccess().getAlternatives(), "rule__Instruction__Alternatives");
			builder.put(grammarAccess.getMoveAccess().getAlternatives(), "rule__Move__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getBotAccess().getGroup(), "rule__Bot__Group__0");
			builder.put(grammarAccess.getBotAccess().getGroup_3(), "rule__Bot__Group_3__0");
			builder.put(grammarAccess.getBotAccess().getGroup_4(), "rule__Bot__Group_4__0");
			builder.put(grammarAccess.getBotAccess().getGroup_4_3(), "rule__Bot__Group_4_3__0");
			builder.put(grammarAccess.getPointAccess().getGroup(), "rule__Point__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getGoToAccess().getGroup(), "rule__GoTo__Group__0");
			builder.put(grammarAccess.getRightAccess().getGroup(), "rule__Right__Group__0");
			builder.put(grammarAccess.getLeftAccess().getGroup(), "rule__Left__Group__0");
			builder.put(grammarAccess.getReverseAccess().getGroup(), "rule__Reverse__Group__0");
			builder.put(grammarAccess.getForwardAccess().getGroup(), "rule__Forward__Group__0");
			builder.put(grammarAccess.getIfObjectDetectedAccess().getGroup(), "rule__IfObjectDetected__Group__0");
			builder.put(grammarAccess.getIfObjectDetectedAccess().getGroup_3(), "rule__IfObjectDetected__Group_3__0");
			builder.put(grammarAccess.getIfObjectDetectedAccess().getGroup_3_1(), "rule__IfObjectDetected__Group_3_1__0");
			builder.put(grammarAccess.getIfObstacleDetectedAccess().getGroup(), "rule__IfObstacleDetected__Group__0");
			builder.put(grammarAccess.getIfObstacleDetectedAccess().getGroup_3(), "rule__IfObstacleDetected__Group_3__0");
			builder.put(grammarAccess.getIfObstacleDetectedAccess().getGroup_3_1(), "rule__IfObstacleDetected__Group_3_1__0");
			builder.put(grammarAccess.getTakeDropObjectAccess().getGroup(), "rule__TakeDropObject__Group__0");
			builder.put(grammarAccess.getWhileAccess().getGroup(), "rule__While__Group__0");
			builder.put(grammarAccess.getWhileAccess().getGroup_6(), "rule__While__Group_6__0");
			builder.put(grammarAccess.getWhileAccess().getGroup_6_1(), "rule__While__Group_6_1__0");
			builder.put(grammarAccess.getBotAccess().getInitialPositionAssignment_3_1(), "rule__Bot__InitialPositionAssignment_3_1");
			builder.put(grammarAccess.getBotAccess().getInstructionListAssignment_4_2(), "rule__Bot__InstructionListAssignment_4_2");
			builder.put(grammarAccess.getBotAccess().getInstructionListAssignment_4_3_1(), "rule__Bot__InstructionListAssignment_4_3_1");
			builder.put(grammarAccess.getPointAccess().getXAssignment_3(), "rule__Point__XAssignment_3");
			builder.put(grammarAccess.getPointAccess().getYAssignment_5(), "rule__Point__YAssignment_5");
			builder.put(grammarAccess.getGoToAccess().getSpeedAssignment_3(), "rule__GoTo__SpeedAssignment_3");
			builder.put(grammarAccess.getGoToAccess().getDurationAssignment_5(), "rule__GoTo__DurationAssignment_5");
			builder.put(grammarAccess.getRightAccess().getSpeedAssignment_3(), "rule__Right__SpeedAssignment_3");
			builder.put(grammarAccess.getRightAccess().getDurationAssignment_5(), "rule__Right__DurationAssignment_5");
			builder.put(grammarAccess.getLeftAccess().getSpeedAssignment_3(), "rule__Left__SpeedAssignment_3");
			builder.put(grammarAccess.getLeftAccess().getDurationAssignment_5(), "rule__Left__DurationAssignment_5");
			builder.put(grammarAccess.getReverseAccess().getSpeedAssignment_3(), "rule__Reverse__SpeedAssignment_3");
			builder.put(grammarAccess.getReverseAccess().getDurationAssignment_5(), "rule__Reverse__DurationAssignment_5");
			builder.put(grammarAccess.getForwardAccess().getSpeedAssignment_3(), "rule__Forward__SpeedAssignment_3");
			builder.put(grammarAccess.getForwardAccess().getDurationAssignment_5(), "rule__Forward__DurationAssignment_5");
			builder.put(grammarAccess.getIfObjectDetectedAccess().getListOfInstructionsAssignment_3_0(), "rule__IfObjectDetected__ListOfInstructionsAssignment_3_0");
			builder.put(grammarAccess.getIfObjectDetectedAccess().getListOfInstructionsAssignment_3_1_1(), "rule__IfObjectDetected__ListOfInstructionsAssignment_3_1_1");
			builder.put(grammarAccess.getIfObstacleDetectedAccess().getListOfInstructionsAssignment_3_0(), "rule__IfObstacleDetected__ListOfInstructionsAssignment_3_0");
			builder.put(grammarAccess.getIfObstacleDetectedAccess().getListOfInstructionsAssignment_3_1_1(), "rule__IfObstacleDetected__ListOfInstructionsAssignment_3_1_1");
			builder.put(grammarAccess.getWhileAccess().getNbAssignment_3(), "rule__While__NbAssignment_3");
			builder.put(grammarAccess.getWhileAccess().getListOfInstructionsAssignment_6_0(), "rule__While__ListOfInstructionsAssignment_6_0");
			builder.put(grammarAccess.getWhileAccess().getListOfInstructionsAssignment_6_1_1(), "rule__While__ListOfInstructionsAssignment_6_1_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PolybotGrammarAccess grammarAccess;

	@Override
	protected InternalPolybotParser createParser() {
		InternalPolybotParser result = new InternalPolybotParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PolybotGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PolybotGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
